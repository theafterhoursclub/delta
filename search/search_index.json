{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Delta","text":"<p>Welcome to the documentation for the Delta package.</p> <p>Delta is a Django-based project and task management tool designed to help teams and individuals organize, track, and manage their work efficiently.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Kanban board with drag-and-drop task management</li> <li>Task list with advanced filtering and sorting (AG Grid)</li> <li>Customizable workflow statuses</li> <li>User authentication and management</li> <li>Modern, responsive UI with a sidebar and color scheme</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>See Installation for setup instructions.</li> <li>See Usage for how to use the Kanban features.</li> </ul>"},{"location":"#modules","title":"Modules","text":"<ul> <li><code>kanban</code>: Core Kanban app (models, views, templates)</li> <li><code>users</code>: User management</li> </ul>"},{"location":"#license","title":"License","text":"<p>MIT License</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.12+</li> <li>Node.js (for frontend dependencies)</li> <li>Django 5.x</li> </ul>"},{"location":"installation/#steps","title":"Steps","text":"<ol> <li> <p>Clone the repository</p> <pre><code>git clone &lt;your-repo-url&gt;\ncd delta\n</code></pre> </li> <li> <p>Install Python dependencies</p> <pre><code>pip install -e .[dev]\n</code></pre> </li> <li> <p>Install Node.js dependencies</p> <pre><code>npm install\n</code></pre> </li> <li> <p>Copy static assets</p> <pre><code>python copy_node_to_static.py\n</code></pre> </li> <li> <p>Apply migrations</p> <pre><code>python manage.py migrate\n</code></pre> </li> <li> <p>Create a <code>.env</code> file</p> <pre><code>SECRET_KEY=your-secret-key\n</code></pre> </li> <li> <p>Set up pre-commit hooks</p> <p>This project uses the <code>pre-commit</code> package to ensure code quality by running both <code>black</code> and <code>pylint</code> before any commit. To enable this, run:</p> <pre><code>pre-commit install\n</code></pre> <p>Now, every time you commit, <code>black</code> and <code>pylint</code> will automatically check your code.</p> </li> <li> <p>Run the development server</p> <pre><code>python manage.py runserver\n</code></pre> </li> <li> <p>Access the app</p> <p>Open http://localhost:8000 in your browser.</p> </li> </ol>"},{"location":"kanban/","title":"Kanban App","text":"<p>The <code>kanban</code> Django app provides the core functionality for project and task management.</p>"},{"location":"kanban/#models","title":"Models","text":"<p>Models for the Kanban application, including Task and related logic.</p>"},{"location":"kanban/#kanban.models.Sprint","title":"<code>Sprint</code>","text":"<p>               Bases: <code>Model</code></p> <p>This holds information about a sprint</p>"},{"location":"kanban/#kanban.models.Task","title":"<code>Task</code>","text":"<p>               Bases: <code>Model</code></p> <p>This holds information about a task</p>"},{"location":"kanban/#kanban.models.Task.get_due_date_for_working_day","title":"<code>get_due_date_for_working_day(year, month, bank_holidays=None)</code>","text":"<p>Returns the date for the Nth working day (Monday-Friday, excluding bank holidays) starting from the given month and year. If bau_working_day exceeds the number of working days in the month, continues into the next  month(s). bau_working_day is 1-based (WD1 = first working day). bank_holidays: optional set/list of datetime.date objects to skip as working days.</p> Source code in <code>kanban\\models.py</code> <pre><code>def get_due_date_for_working_day(self, year, month, bank_holidays=None):\n    \"\"\"\n    Returns the date for the Nth working day (Monday-Friday, excluding bank holidays)\n    starting from the given month and year.\n    If bau_working_day exceeds the number of working days in the month, continues into the next\n     month(s).\n    bau_working_day is 1-based (WD1 = first working day).\n    bank_holidays: optional set/list of datetime.date objects to skip as working days.\n    \"\"\"\n    day = 1\n    count = 0\n    current_year = year\n    current_month = month\n    try:\n        wd_number = int(str(self.bau_working_day).replace(\"WD\", \"\"))\n    except (ValueError, AttributeError):  # Fix: catch only relevant exceptions\n        return None\n    if bank_holidays is None:\n        bank_holidays = set()\n    else:\n        bank_holidays = set(bank_holidays)\n    while True:\n        try:\n            date = datetime.date(current_year, current_month, day)\n        except ValueError:\n            # Move to next month\n            if current_month == 12:\n                current_month = 1\n                current_year += 1\n            else:\n                current_month += 1\n            day = 1\n            continue\n        if date.weekday() &lt; 5 and date not in bank_holidays:  # 0=Monday, 4=Friday\n            count += 1\n            if count == wd_number:\n                return date\n        day += 1\n</code></pre>"},{"location":"kanban/#kanban.models.Task.get_due_display","title":"<code>get_due_display()</code>","text":"<p>Return the appropriate due value based on task_type.</p> Source code in <code>kanban\\models.py</code> <pre><code>def get_due_display(self):\n    \"\"\"Return the appropriate due value based on task_type.\"\"\"\n    if self.task_type.lower() == \"bau\" and self.bau_working_day:\n        return self.bau_working_day\n    return self.due_date\n</code></pre>"},{"location":"kanban/#kanban.models.Task.list_ordered","title":"<code>list_ordered()</code>  <code>classmethod</code>","text":"<p>Return queryset ordered by 'list_order'.</p> Source code in <code>kanban\\models.py</code> <pre><code>@classmethod\ndef list_ordered(cls):\n    \"\"\"Return queryset ordered by 'list_order'.\"\"\"\n    return cls.objects.order_by(\"list_order\")\n</code></pre>"},{"location":"kanban/#kanban.models.Task.ordered","title":"<code>ordered()</code>  <code>classmethod</code>","text":"<p>Return queryset ordered by 'order'.</p> Source code in <code>kanban\\models.py</code> <pre><code>@classmethod\ndef ordered(cls):\n    \"\"\"Return queryset ordered by 'order'.\"\"\"\n    return cls.objects.order_by(\"order\")\n</code></pre>"},{"location":"kanban/#views","title":"Views","text":"<p>Views for the Kanban application.</p>"},{"location":"kanban/#kanban.views.backlog","title":"<code>backlog(request)</code>","text":"<p>Render the task list, ordered by list_order.</p> Source code in <code>kanban\\views.py</code> <pre><code>def backlog(request):\n    \"\"\"Render the task list, ordered by list_order.\"\"\"\n    tasks = Task.list_ordered()\n    return render(request, \"kanban/backlog.html\", {\"tasks\": tasks})\n</code></pre>"},{"location":"kanban/#kanban.views.create_task","title":"<code>create_task(request)</code>","text":"<p>Create a new task.</p> Source code in <code>kanban\\views.py</code> <pre><code>def create_task(request):\n    \"\"\"Create a new task.\"\"\"\n    if request.method == \"POST\":\n        form = TaskForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect(\"backlog\")\n    else:\n        form = TaskForm()\n    return render(request, \"kanban/create_task.html\", {\"form\": form})\n</code></pre>"},{"location":"kanban/#kanban.views.edit_task","title":"<code>edit_task(request, pk)</code>","text":"<p>Edit an existing task.</p> Source code in <code>kanban\\views.py</code> <pre><code>def edit_task(request, pk):\n    \"\"\"Edit an existing task.\"\"\"\n    task = Task.objects.get(pk=pk)\n    if request.method == \"POST\":\n        form = TaskForm(request.POST, instance=task)\n        if form.is_valid():\n            form.save()\n            return redirect(\"backlog\")\n    else:\n        form = TaskForm(instance=task)\n    return render(request, \"kanban/edit_task.html\", {\"form\": form, \"task\": task})\n</code></pre>"},{"location":"kanban/#kanban.views.home","title":"<code>home(request)</code>","text":"<p>Render the home page.</p> Source code in <code>kanban\\views.py</code> <pre><code>def home(request):\n    \"\"\"Render the home page.\"\"\"\n    return render(request, \"kanban/home.html\")\n</code></pre>"},{"location":"kanban/#kanban.views.kanban_board","title":"<code>kanban_board(request)</code>","text":"<p>Render the Kanban board, grouping tasks by status and ordering by 'order'.</p> Source code in <code>kanban\\views.py</code> <pre><code>def kanban_board(request):\n    \"\"\"Render the Kanban board, grouping tasks by status and ordering by 'order'.\"\"\"\n    statuses = [\"todo\", \"in_progress\", \"help\", \"done\"]\n    tasks_by_status = {status: [] for status in statuses}\n    for task in Task.objects.exclude(task_type=\"story\").order_by(\"order\"):\n        if task.status in tasks_by_status:\n            tasks_by_status[task.status].append(task)\n    return render(\n        request,\n        \"kanban/kanban_board.html\",\n        {\n            \"tasks_by_status\": tasks_by_status,\n            \"statuses\": statuses,\n            \"task_type\": \"All Tasks\",\n        },\n    )\n</code></pre>"},{"location":"kanban/#kanban.views.reorder_list_tasks","title":"<code>reorder_list_tasks(request)</code>","text":"<p>Reorder tasks by 'list_order'.</p> Source code in <code>kanban\\views.py</code> <pre><code>def reorder_list_tasks(request):\n    \"\"\"Reorder tasks by 'list_order'.\"\"\"\n    if request.method == \"POST\":\n        data = json.loads(request.body)\n        ordered_ids = data.get(\"ordered_ids\", [])\n\n        # Update the list_order for each task in the new order\n        for idx, task_id in enumerate(ordered_ids):\n            Task.objects.filter(id=task_id).update(list_order=idx)\n\n        return JsonResponse({\"success\": True})\n    return JsonResponse({\"success\": False}, status=400)\n</code></pre>"},{"location":"kanban/#kanban.views.reorder_tasks","title":"<code>reorder_tasks(request)</code>","text":"<p>Reorder tasks by 'order' and update their status.</p> Source code in <code>kanban\\views.py</code> <pre><code>def reorder_tasks(request):\n    \"\"\"Reorder tasks by 'order' and update their status.\"\"\"\n    if request.method == \"POST\":\n        data = json.loads(request.body)\n        status = data.get(\"status\")\n        ordered_ids = data.get(\"ordered_ids\", [])\n\n        # Update the order and status for each task in the new order\n        for idx, task_id in enumerate(ordered_ids):\n            Task.objects.filter(id=task_id).update(order=idx, status=status)\n\n        return JsonResponse({\"success\": True})\n    return JsonResponse({\"success\": False}, status=400)\n</code></pre>"},{"location":"kanban/#kanban.views.story_board","title":"<code>story_board(request)</code>","text":"<p>Render the story board, grouping tasks by status and ordering by 'order'.</p> Source code in <code>kanban\\views.py</code> <pre><code>def story_board(request):\n    \"\"\"Render the story board, grouping tasks by status and ordering by 'order'.\"\"\"\n    statuses = [\"todo\", \"in_progress\", \"help\", \"done\"]\n    tasks_by_status = {status: [] for status in statuses}\n    for task in Task.objects.filter(task_type=\"story\").order_by(\"order\"):\n        if task.status in tasks_by_status:\n            tasks_by_status[task.status].append(task)\n    return render(\n        request,\n        \"kanban/kanban_board.html\",\n        {\n            \"tasks_by_status\": tasks_by_status,\n            \"statuses\": statuses,\n            \"task_type\": \"All Stories\",\n        },\n    )\n</code></pre>"},{"location":"kanban/#templates","title":"Templates","text":"<ul> <li><code>kanban_board.html</code>: Kanban board UI.</li> <li><code>task_list.html</code>: Task list table.</li> <li><code>create_task.html</code>: Task creation form.</li> <li><code>edit_task.html</code>: Task editing form.</li> <li><code>sidebar.html</code>: Navigation sidebar.</li> </ul>"},{"location":"kanban/#static","title":"Static","text":"<ul> <li><code>colors.css</code>: Color scheme.</li> <li>JS/CSS for AG Grid, Bootstrap, SortableJS.</li> </ul>"},{"location":"users/","title":"Users Module","text":"<p>The <code>users</code> Django app manages user authentication and user profiles.</p>"},{"location":"users/#features","title":"Features","text":"<ul> <li>Custom user model (extending Django's <code>AbstractUser</code>)</li> <li>Login, logout, and registration views</li> <li>User profile management</li> </ul>"},{"location":"users/#models","title":"Models","text":"<p>               Bases: <code>AbstractUser</code></p>"},{"location":"users/#templates","title":"Templates","text":"<ul> <li>Login, logout, registration, and profile templates</li> </ul>"},{"location":"users/#usage","title":"Usage","text":""},{"location":"users/#kanban-board","title":"Kanban Board","text":"<ul> <li>Navigate to the Kanban Board from the sidebar.</li> <li>Drag and drop tasks between columns to update their status and order.</li> <li>Click on a task to edit its details.</li> </ul>"},{"location":"users/#task-list","title":"Task List","text":"<ul> <li>View all tasks in a sortable, filterable table.</li> <li>Click \"Edit\" to update a task.</li> </ul>"},{"location":"users/#creating-tasks","title":"Creating Tasks","text":"<ul> <li>Use the \"Create Task\" link in the sidebar to add a new task.</li> </ul>"},{"location":"users/#sidebar","title":"Sidebar","text":"<ul> <li>Use the sidebar to navigate between the homepage, task list, kanban board, and task creation.</li> </ul>"},{"location":"users/#customization","title":"Customization","text":"<ul> <li>The color scheme can be changed in <code>static/kanban/colors.css</code>.</li> <li>Workflow statuses can be customized in the <code>Task</code> model.</li> </ul>"}]}